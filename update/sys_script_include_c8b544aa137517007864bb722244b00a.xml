<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_nykl3_custom_rep.weekEntryCheckReport</api_name>
        <client_callable>false</client_callable>
        <description>Week Entry Check</description>
        <name>weekEntryCheckReport</name>
        <script><![CDATA[var weekEntryCheckReport = Class.create();
weekEntryCheckReport.prototype = {
	initialize: function() {
		this.cru = new customReportUtil();
	},
	
	getWeekEntryCheckReport: function(isJSON, report, weekStart, userType) {
		this.isJSON = isJSON;
		var WS = new GlideDateTime(weekStart);
		this.week = WS.getDate();
		this.days = [];
		for (var i=0; i<7; i++) {
			this.days.push(WS.getDate().toString());
			WS.addDaysUTC(1);
		}
		
		this.labels = (report.labels.toString() + ',' + this.days.toString() + ',' + 'Total').split(',');
		this.fields = report.fields.toString().split(',');
		
		var orderBy = report.order_by? report.order_by.toString().split(',') : '';
		var table = report.table.toString();
		var encodedQuery = "week_start="+this.week;
		if (userType && userType != undefined)
			encodedQuery += "^employee_type="+userType;
		var records = this.createRecords(table, encodedQuery, orderBy);
		
		return { fields: this.fields, labels: this.labels, records: records };
		
	},
	
	createRecords: function(table, encodedQuery, orderBy) {
		var gr = new GlideRecord(table);
		if (encodedQuery) gr.addEncodedQuery(encodedQuery);
		if (orderBy) for (var o in orderBy) gr.orderBy(orderBy[o]);
		gr.query();
			
		var records = [];
		while (gr.next()) {
			this.addRow(records, gr);
		}
		
		if (!this.isJSON) {
			return this.cru.transform(records, this.labels);
		}
		return records;
	},
	
	addRow: function (records, gr) {
		var daysInWeek = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];
		var row = this.cru.getFieldsRow(gr, this.fields, this.labels);
		row.Total = gr.total;
		if (row['Resource Type'] === 'Consultant')
			row['Resource Type'] = gr.getValue('vendor') === '' ? gr.getValue('employee.user.u_vendor') : gr.getValue('vendor');
		for (var diw in daysInWeek) {
			row[this.days[diw]] = isNaN(parseFloat(gr.getValue(daysInWeek[diw]))) ? 0 : parseFloat(gr.getValue(daysInWeek[diw]));
		}
		records.push(row);
	},
	
	
	type: 'weekEntryCheckReport'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>GARGL</sys_created_by>
        <sys_created_on>2018-05-03 17:40:46</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>c8b544aa137517007864bb722244b00a</sys_id>
        <sys_mod_count>40</sys_mod_count>
        <sys_name>weekEntryCheckReport</sys_name>
        <sys_package display_value="Custom Reports" source="x_nykl3_custom_rep">42709326131553807864bb722244b054</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Custom Reports">42709326131553807864bb722244b054</sys_scope>
        <sys_update_name>sys_script_include_c8b544aa137517007864bb722244b00a</sys_update_name>
        <sys_updated_by>GARGL</sys_updated_by>
        <sys_updated_on>2018-05-14 12:17:03</sys_updated_on>
    </sys_script_include>
</record_update>
